import{_ as s,c as a,d as e,o as p}from"./app-Cv0tWJIi.js";const c={};function t(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="cai-thien-hieu-nang-tesseract-ocr-bang-cache" tabindex="-1"><a class="header-anchor" href="#cai-thien-hieu-nang-tesseract-ocr-bang-cache"><span>Cải thiện hiệu năng Tesseract-OCR bằng Cache</span></a></h1><p>Trong nhiều ứng dụng, dữ liệu OCR lặp lại thường xuyên, khiến việc gọi Tesseract nhiều lần trở nên lãng phí.</p><p>Bài viết này giới thiệu cách áp dụng cache để lưu kết quả OCR, tránh xử lý lại ảnh trùng, từ đó cải thiện tốc độ, giảm tải CPU, và tối ưu hệ thống nhận diện văn bản.</p><p><a href="#1">1. Giới thiệu</a></p><p><a href="#2">2. Best Practices khi dùng cache cho OCR</a></p><p><a href="#3">3. Triển khai cache trong OCR với Tesseract</a></p><p><a name="1"></a></p><h2 id="📌-1-gioi-thieu" tabindex="-1"><a class="header-anchor" href="#📌-1-gioi-thieu"><span>📌 1. Giới thiệu</span></a></h2><ul><li><p>OCR (Optical Character Recognition) với Tesseract là giải pháp phổ biến để trích xuất văn bản từ hình ảnh.</p></li><li><p>Tuy nhiên, trong thực tế triển khai, đặc biệt ở các hệ thống xử lý ảnh tự động, bạn sẽ nhận ra một vấn đề: ảnh hoặc dữ liệu lặp lại rất nhiều.</p></li><li><p>Ví dụ:</p><ul><li><p>✦ Hệ thống giám sát máy test trong sản xuất, màn hình hiển thị kết quả lặp đi lặp lại.</p></li><li><p>✦ Scan form, biên lai, chứng từ với cùng một mẫu.</p></li><li><p>✦ Nhận diện số serial hoặc mã máy chỉ thay đổi một vài ký tự.</p></li></ul></li><li><p>⚠️ Trong những tình huống như vậy, nếu mỗi lần đều gửi ảnh vào Tesseract để OCR, hệ thống sẽ phải xử lý khối lượng công việc nặng nề, tốn CPU, và thời gian phản hồi chậm.</p></li></ul><h3 id="_1️⃣-giai-phap-cache-bo-nho-đem" tabindex="-1"><a class="header-anchor" href="#_1️⃣-giai-phap-cache-bo-nho-đem"><span>1️⃣ Giải pháp cache (bộ nhớ đệm)</span></a></h3><ul><li><p>Nếu ảnh đã từng được nhận diện, ta có thể lưu lại kết quả.</p></li><li><p>Khi gặp lại ảnh giống hệt, chỉ cần lấy kết quả từ cache thay vì chạy OCR lại.</p></li></ul><h4 id="✅-uu-điem" tabindex="-1"><a class="header-anchor" href="#✅-uu-điem"><span>✅ Ưu điểm:</span></a></h4><ul><li><p>➀ Giảm số lần gọi Tesseract.</p></li><li><p>➁ Tăng tốc độ xử lý.</p></li><li><p>➂ Giảm tải CPU, tiết kiệm tài nguyên.</p></li></ul><h3 id="_2️⃣-co-che-cache" tabindex="-1"><a class="header-anchor" href="#_2️⃣-co-che-cache"><span>2️⃣ Cơ chế cache</span></a></h3><ul><li><p>➀ Một ảnh → một kết quả OCR.</p></li><li><p>➁ Ảnh được nhận diện → lưu kết quả vào cache.</p></li><li><p>➂ Khi gặp lại ảnh giống hệt → lấy từ cache thay vì OCR lại.</p></li></ul><h4 id="🔥-cach-nhan-dien-anh-trung" tabindex="-1"><a class="header-anchor" href="#🔥-cach-nhan-dien-anh-trung"><span>🔥 Cách nhận diện ảnh trùng:</span></a></h4><ul><li>Hash (MD5, SHA256) trên dữ liệu ảnh.</li></ul><h3 id="_3️⃣-cac-loai-cache" tabindex="-1"><a class="header-anchor" href="#_3️⃣-cac-loai-cache"><span>3️⃣ Các loại cache</span></a></h3><ul><li><p>Có thể cache theo nhiều mức:</p><ul><li><p>❶ In-memory cache: Lưu vào RAM</p><ul><li>✔️ Tốc độ truy cập cực nhanh.</li><li>✔️ Phù hợp khi cần OCR realtime.</li><li>✔️ Không để lại file rác trên ổ cứng.</li><li>❌ Mất cache khi restart process</li><li>❌ Bị giới hạn dung lượng theo RAM (ví dụ vài trăm MB hoặc vài GB tùy server).</li></ul></li><li><p>❷ Disk cache: Lưu ra ổ cứng</p><ul><li>✔️ Dung lượng lớn, có thể lưu cache hàng chục GB.</li><li>✔️ Cache bền vững: restart process/máy vẫn giữ được.</li><li>✔️ Phù hợp cho dữ liệu OCR lặp lại nhiều ngày.</li><li>❌ Chậm hơn RAM một chút.</li><li>❌ Có thể gây hao mòn SSD nếu ghi/xóa liên tục.</li><li>❌ Cần cơ chế dọn dẹp (TTL, LRU).</li></ul></li><li><p>❸ Kết hợp (Hybrid): Dùng memory cho ảnh mới nhất, disk cho ảnh lâu hơn.</p></li></ul></li></ul><h3 id="_4️⃣-gioi-han-so-luong-cache" tabindex="-1"><a class="header-anchor" href="#_4️⃣-gioi-han-so-luong-cache"><span>4️⃣ Giới hạn số lượng cache</span></a></h3><ul><li><p>● Cache không nên “vô hạn”. Việc giới hạn số lượng cache giúp tránh việc ngốn hết RAM/ổ cứng và giữ cho hệ thống ổn định.</p></li><li><p>● Việc giới hạn số lượng cache sẽ tránh tình trạng phình ra và gây tốn bộ nhớ hoặc dung lượng ổ đĩa, nhất là khi ảnh OCR nhiều và kích thước lớn.</p></li><li><p>● Một số cách giới hạn hợp lý:</p></li></ul><h4 id="❶-gioi-han-theo-so-luong-muc-entries" tabindex="-1"><a class="header-anchor" href="#❶-gioi-han-theo-so-luong-muc-entries"><span>❶ Giới hạn theo số lượng mục (entries)</span></a></h4><ul><li><p>✦ Chỉ giữ N ảnh/vùng gần nhất (ví dụ 500 hoặc 1000 mục).</p></li><li><p>✦ Khi cache đầy → xóa entry cũ nhất (LRU - Least Recently Used).</p><ul><li>✧ Có thể chọn chỉ xóa 1 entry cũ nhất hoặc nhiều entries cũ cùng lúc (ví dụ 20% entries cũ nhất).</li></ul></li><li><p>✦ Dùng collections.OrderedDict hoặc thư viện functools.lru_cache (cho RAM) để tự động cơ chế LRU hoặc tự viết logic thủ công.</p></li></ul><h4 id="❷-gioi-han-theo-dung-luong" tabindex="-1"><a class="header-anchor" href="#❷-gioi-han-theo-dung-luong"><span>❷ Giới hạn theo dung lượng</span></a></h4><ul><li><p>✦ Ví dụ tổng kích thước file cache không vượt quá 100MB.</p></li><li><p>✦ Khi vượt ngưỡng → xóa các file cũ nhất.</p></li></ul><h4 id="❸-gioi-han-theo-thoi-gian-ton-tai-ttl" tabindex="-1"><a class="header-anchor" href="#❸-gioi-han-theo-thoi-gian-ton-tai-ttl"><span>❸ Giới hạn theo thời gian tồn tại (TTL)</span></a></h4><ul><li>✦ Mỗi entry cache chỉ tồn tại trong X phút/giờ (ví dụ 10 phút).</li></ul><h4 id="❹-ket-hop-nhieu-tieu-chi" tabindex="-1"><a class="header-anchor" href="#❹-ket-hop-nhieu-tieu-chi"><span>❹ Kết hợp nhiều tiêu chí</span></a></h4><ul><li>✦ Ví dụ: giới hạn tối đa 1000 entry và TTL = 10 phút → vừa tránh đầy bộ nhớ, vừa đảm bảo dữ liệu không quá cũ.</li></ul><p><a name="2"></a></p><h2 id="📌-2-best-practices-khi-dung-cache-cho-ocr" tabindex="-1"><a class="header-anchor" href="#📌-2-best-practices-khi-dung-cache-cho-ocr"><span>📌 2. Best Practices khi dùng cache cho OCR</span></a></h2><ul><li>Các chiến lược sử dụng cache hiểu quả:</li></ul><h3 id="_1️⃣-hash-tren-anh-goc-hay-sau-tien-xu-ly" tabindex="-1"><a class="header-anchor" href="#_1️⃣-hash-tren-anh-goc-hay-sau-tien-xu-ly"><span>1️⃣ Hash trên ảnh gốc hay sau tiền xử lý?</span></a></h3><ul><li>Việc hash trên ảnh gốc hay ảnh đã qua tiền xử lý sẽ ảnh hưởng trực tiếp đến hiệu quả cache.</li></ul><h4 id="❶-hash-tren-anh-goc" tabindex="-1"><a class="header-anchor" href="#❶-hash-tren-anh-goc"><span>❶ Hash trên ảnh gốc</span></a></h4><ul><li><p>✔️ Ưu điểm:</p><ul><li><p>✧ Dễ làm, chỉ cần đọc ảnh và băm ngay.</p></li><li><p>✧ Không cần qua bước tiền xử lý → tối ưu hiệu năng.</p></li></ul></li><li><p>❌ Nhược điểm:</p><ul><li>✧ Hai ảnh trông “giống nhau” nhưng chỉ khác rất nhỏ (ví dụ khác DPI, khác một pixel do noise) → hash sẽ khác hoàn toàn → cache không hit.</li></ul></li></ul><h4 id="❷-hash-sau-tien-xu-ly" tabindex="-1"><a class="header-anchor" href="#❷-hash-sau-tien-xu-ly"><span>❷ Hash sau tiền xử lý</span></a></h4><ul><li><p>✔️ Ưu điểm:</p><ul><li>✧ Loại bỏ sự khác biệt không quan trọng (noise, độ sáng, DPI…) → cache hit cao hơn.</li></ul></li><li><p>❌ Nhược điểm:</p><ul><li><p>✧ Tốn thêm thời gian tiền xử lý trước khi hash.</p></li><li><p>✧ Nếu thay đổi thuật toán xử lý (ví dụ threshold khác) → hash khác → cache cũ không dùng lại được.</p></li></ul></li></ul><h4 id="💡-kinh-nghiem" tabindex="-1"><a class="header-anchor" href="#💡-kinh-nghiem"><span>💡 Kinh nghiệm:</span></a></h4><ul><li><p>✦ Nếu ảnh ổn định, ít nhiễu → hash trên ảnh gốc để tiết kiệm công sức.</p></li><li><p>✦ Nếu chỉ OCR text nhỏ, fixed-layout (như máy test, form scan) → nên hash trên ảnh đã tiền xử lý (grayscale + threshold).</p></li></ul><h3 id="_2️⃣-chon-ram-cache-hay-disk-cache" tabindex="-1"><a class="header-anchor" href="#_2️⃣-chon-ram-cache-hay-disk-cache"><span>2️⃣ Chọn RAM cache hay Disk cache?</span></a></h3><h4 id="❶-ram-cache" tabindex="-1"><a class="header-anchor" href="#❶-ram-cache"><span>❶ RAM cache</span></a></h4><ul><li><p>Dùng khi:</p><ul><li><p>✧ Ảnh OCR nhỏ/gọn.</p></li><li><p>✧ Ứng dụng yêu cầu tốc độ cao.</p></li><li><p>✧ Cache chỉ cần sống trong session (ví dụ một service OCR chạy vài giờ rồi reset).</p></li></ul></li></ul><h4 id="❷-disk-cache" tabindex="-1"><a class="header-anchor" href="#❷-disk-cache"><span>❷ Disk cache</span></a></h4><ul><li><p>Dùng khi:</p><ul><li><p>✧ OCR ảnh lớn, nhiều file, dữ liệu lặp lại qua nhiều ngày.</p></li><li><p>✧ Hệ thống chạy dài hạn, cần cache bền vững.</p></li><li><p>✧ Ưu tiên tiết kiệm RAM.</p></li></ul></li></ul><h4 id="❸-ket-hop-hybrid-ram-disk" tabindex="-1"><a class="header-anchor" href="#❸-ket-hop-hybrid-ram-disk"><span>❸ Kết hợp Hybrid (RAM + Disk)</span></a></h4><ul><li><p>✧ Đây là lựa chọn cân bằng nhất cho hầu hết các hệ thống OCR production.</p></li><li><p>✧ Thư viện như diskcache hỗ trợ sẵn cơ chế này.</p></li></ul><h4 id="⚠️-luu-y" tabindex="-1"><a class="header-anchor" href="#⚠️-luu-y"><span>⚠️ Lưu ý:</span></a></h4><ul><li><p>Trường hợp OCR đang dùng multiprocessing, mỗi worker process sẽ có một instance ocr_cache riêng biệt.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">ocr_cache <span class="token operator">=</span> OCRCacheManager<span class="token punctuation">(</span>max_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Process 1 set cache → Process 2 không thấy cache của Process 1. Đó là lý do khi dùng RAM cache sẽ không chia sẻ dữ liệu đã lưu trước đó trong cache giữa các process được cho nhau.</li></ul></li><li><p>👉 <strong>Giải pháp:</strong> Shared cache giữa processes</p><ul><li><p>➀ Option A - Redis Cache / Memcached:</p><ul><li><p>✦ Nếu hệ thống OCR phân tán hoặc nhiều máy chạy song song, dùng Redis hoặc Memcached để lưu cache.</p></li><li><p>✔️ Ưu điểm: Rất nhanh, hỗ trợ multi-process và multi-machine.</p></li><li><p>❌ Nhược điểm: Phải cài thêm dịch vụ.</p></li></ul></li><li><p>➁ Option B - File-based shared cache (disk cache):</p><ul><li><p>✦ Mỗi khi OCR xong, lưu kết quả vào file .json hoặc .pickle trên disk, đặt key theo hash ảnh.</p></li><li><p>✦ Khi process khác OCR cùng ảnh, nó sẽ đọc file cache thay vì OCR lại.</p></li></ul></li><li><p>💡 <strong>Kinh nghiệm</strong>:</p><ul><li><p>✦ Nếu OCR chỉ chạy trên một máy, và file ảnh nhỏ → <strong>diskcache</strong> là lựa chọn ngon: dễ triển khai, tự động thread-safe, và không bị mất cache khi process chết.</p><ul><li>✔️ Là Hybrid cache (RAM + Disk), nhưng thiên về Disk cache có tăng tốc RAM.</li><li>✔️ Chỉ cần cài Python package, không cần service bên ngoài.</li><li>✔️ Dễ triển khai hơn, không phải lo cấu hình network, user, auth như Redis.</li><li>✔️ Có thể tự động xóa entries cũ khi vượt quá size_limit.</li><li>✔️ Có cơ chế mặc định là Least Recently Used (LRU), tức là key nào lâu không được truy cập sẽ bị xóa trước.</li></ul></li><li><p>✦ Nếu OCR chạy phân tán nhiều máy → dùng Redis.</p></li></ul></li></ul></li></ul><h3 id="_3️⃣-nen-gioi-han-so-luong-cache-theo-cach-nao" tabindex="-1"><a class="header-anchor" href="#_3️⃣-nen-gioi-han-so-luong-cache-theo-cach-nao"><span>3️⃣ Nên giới hạn số lượng cache theo cách nào?</span></a></h3><ul><li><p>Cache không nên “vô hạn”. Việc giới hạn số lượng cache giúp tránh việc ngốn hết RAM/ổ cứng và giữ cho hệ thống ổn định.</p></li><li><p>✔️ Nếu dùng RAM cache → Giới hạn theo số lượng mục (entries)</p></li><li><p>✔️ Nếu dùng Disk cache → Giới hạn theo dung lượng bằng (size_limit) hoặc TTL (tự động xoá cache cũ sau X ngày).</p></li><li><p>✔️ Nếu dữ liệu OCR thay đổi theo ngày/phiên bản → Giới hạn theo TTL.</p></li></ul><h4 id="⚠️-kinh-nghiem" tabindex="-1"><a class="header-anchor" href="#⚠️-kinh-nghiem"><span>⚠️ Kinh nghiệm:</span></a></h4><ul><li><p>✦ Nên log lại cache hit/miss để điều chỉnh.</p></li><li><p>✦ Ví dụ log thấy đa số truy vấn không hit cache → cache không còn “hiệu quả”. Lúc này nên điều chỉnh giới hạn cache để tránh lưu thừa.</p></li></ul><h3 id="_4️⃣-trien-khai-cache-hieu-qua-trong-project" tabindex="-1"><a class="header-anchor" href="#_4️⃣-trien-khai-cache-hieu-qua-trong-project"><span>4️⃣ Triển khai cache hiểu quả trong project?</span></a></h3><ul><li><p>Nên tạo riêng <code>cache_manager.py</code> để quản lý cache vì những lý do sau:</p><ul><li><p>✔️ Single Responsibility: Phân tán, <code>cache_manager.py</code> sẽ chỉ tập trung vào cache. OCR sẽ tập trung file khác (ví dụ: <code>ocr_worker.py</code>).</p></li><li><p>✔️ Reusable: Có thể dùng cache cho các module khác.</p></li><li><p>✔️ Testable: Dễ unit test cache logic riêng biệt.</p></li><li><p>✔️ Maintainable: Dễ modify cache strategy mà không ảnh hưởng OCR logic.</p></li><li><p>✔️ Salable: Dễ mở rộng cache (Redis, file-based cache...).</p></li></ul></li></ul><p><a name="3"></a></p><h2 id="📌-3-trien-khai-cache-trong-ocr-voi-tesseract" tabindex="-1"><a class="header-anchor" href="#📌-3-trien-khai-cache-trong-ocr-voi-tesseract"><span>📌 3. Triển khai cache trong OCR với Tesseract</span></a></h2><h3 id="_1️⃣-tao-class-quan-ly-cache" tabindex="-1"><a class="header-anchor" href="#_1️⃣-tao-class-quan-ly-cache"><span>1️⃣ Tạo class quản lý cache</span></a></h3><h4 id="❶-ram-cache-1" tabindex="-1"><a class="header-anchor" href="#❶-ram-cache-1"><span>❶ Ram cache</span></a></h4><ul><li><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># cache_manager.py</span></span>
<span class="line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CacheManager</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> max_size<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>cache <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>max_size <span class="token operator">=</span> max_size</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="❷-disk-cache-1" tabindex="-1"><a class="header-anchor" href="#❷-disk-cache-1"><span>❷ Disk cache</span></a></h4><ul><li><p>Thêm logic load cache từ file JSON và lưu cache vài file khi tắt tool.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># cache_manager.py</span></span>
<span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">import</span> json</span>
<span class="line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CacheManager</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cache_file<span class="token operator">=</span><span class="token string">&quot;ocr_cache.json&quot;</span><span class="token punctuation">,</span> max_items<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>cache_file <span class="token operator">=</span> cache_file</span>
<span class="line">        self<span class="token punctuation">.</span>max_size <span class="token operator">=</span> max_items</span>
<span class="line">        self<span class="token punctuation">.</span>cache <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Lưu kết quả OCR</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>_load_cache<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_load_cache</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;Load cache từ file JSON.&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cache_file<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cache_file<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">                    data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment"># Load theo đúng thứ tự FIFO</span></span>
<span class="line">                self<span class="token punctuation">.</span>cache <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;[CacheManager] Lỗi khi load cache: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                self<span class="token punctuation">.</span>cache <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">save_cache</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;Lưu cache ra file JSON.&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cache_file<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">                json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cache<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;[CacheManager] Lỗi khi lưu cache: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2️⃣-sinh-key-duy-nhat-cho-anh" tabindex="-1"><a class="header-anchor" href="#_2️⃣-sinh-key-duy-nhat-cho-anh"><span>2️⃣ Sinh key duy nhất cho ảnh</span></a></h3><ul><li><p>Hash nội dung ảnh sau preprocess (MD5, SHA1).</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> hashlib</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">_hash_image_bytes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>img<span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">_get_cache_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> extra_params<span class="token punctuation">:</span> Tuple <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">    img_hash <span class="token operator">=</span> self<span class="token punctuation">.</span>_hash_image_bytes<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># Nếu cần gắn thêm tham số vào key để phân biệt các nhóm</span></span>
<span class="line">    <span class="token keyword">if</span> extra_params<span class="token punctuation">:</span></span>
<span class="line">        params_str <span class="token operator">=</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> extra_params<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>img_hash<span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span>params_str<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">    <span class="token keyword">return</span> img_hash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3️⃣-tao-cac-ham-get-va-set-ket-qua-ocr-theo-key" tabindex="-1"><a class="header-anchor" href="#_3️⃣-tao-cac-ham-get-va-set-ket-qua-ocr-theo-key"><span>3️⃣ Tạo các hàm get và set kết quả OCR theo key</span></a></h3><ul><li>Cache được lưu dưới dạng dictionary (hash → text_result).</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Trả về kết quả OCR từ cache (nếu có)&quot;&quot;&quot;</span></span>
<span class="line">    key <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_cache_key<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># Nếu key đã tồn tại thì move lên đầu để đánh dấu &quot;vừa dùng&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>move_to_end<span class="token punctuation">(</span>key<span class="token punctuation">,</span> last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">,</span> ocr_result<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Lưu kết quả OCR vào cache.&quot;&quot;&quot;</span></span>
<span class="line">    key <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_cache_key<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Nếu key đã tồn tại thì cập nhật &amp; move lên đầu</span></span>
<span class="line">    <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>move_to_end<span class="token punctuation">(</span>key<span class="token punctuation">,</span> last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> ocr_result</span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Nếu cache đầy → xóa phần tử cuối (ít dùng nhất)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>max_size<span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span>last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Thêm entry mới vào đầu nếu key chưa tồn tại</span></span>
<span class="line">    self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> ocr_result</span>
<span class="line">    self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>move_to_end<span class="token punctuation">(</span>key<span class="token punctuation">,</span> last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4️⃣-don-cache" tabindex="-1"><a class="header-anchor" href="#_4️⃣-don-cache"><span>4️⃣ Dọn cache</span></a></h3><ul><li><p>Dùng khi:</p><ul><li><p>➀ Khi muốn giải phóng RAM thủ công.</p></li><li><p>➁ Khi thay đổi cấu hình OCR.</p></li><li><p>➂ Khi nhận tín hiệu reset từ tool</p></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">clear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Xóa toàn bộ cache.&quot;&quot;&quot;</span></span>
<span class="line">    self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5️⃣-su-dung-trong-ocr" tabindex="-1"><a class="header-anchor" href="#_5️⃣-su-dung-trong-ocr"><span>5️⃣ Sử dụng trong OCR</span></a></h3><ul><li><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># ocr_worker.py</span></span>
<span class="line"><span class="token keyword">from</span> cache_manager <span class="token keyword">import</span> OCRCacheManager</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Khởi tạo cache (giới hạn 500 entry)</span></span>
<span class="line">ocr_cache <span class="token operator">=</span> OCRCacheManager<span class="token punctuation">(</span>max_size<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">ocr_image</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Check cache</span></span>
<span class="line">    result <span class="token operator">=</span> ocr_cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> result <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;✅ OCR từ cache&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> result</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># OCR với Tesseract</span></span>
<span class="line">    result <span class="token operator">=</span> run_tesseract<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Lưu vào cache</span></span>
<span class="line">    ocr_cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> result<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Nếu dùng Disk cache, lưu cache vào file JSON khi tắt tool</span></span>
<span class="line">ocr_cache<span class="token punctuation">.</span>save_cache<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="🔥-vi-du-ket-hop-hybrid-ram-disk-voi-thu-vien-diskcache" tabindex="-1"><a class="header-anchor" href="#🔥-vi-du-ket-hop-hybrid-ram-disk-voi-thu-vien-diskcache"><span>🔥 Ví dụ kết hợp Hybrid (RAM + Disk) với thư viện diskcache</span></a></h3><h4 id="❶-cai-diskcache" tabindex="-1"><a class="header-anchor" href="#❶-cai-diskcache"><span>❶ Cài diskcache</span></a></h4><ul><li><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> diskcache</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="❷-trien-khai-trong-cache-manager-py" tabindex="-1"><a class="header-anchor" href="#❷-trien-khai-trong-cache-manager-py"><span>❷ Triển khai trong <code>cache_manager.py</code></span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">import</span> hashlib</span>
<span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional</span>
<span class="line"><span class="token keyword">import</span> diskcache <span class="token keyword">as</span> dc</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> utils<span class="token punctuation">.</span>common <span class="token keyword">import</span> get_base_dir</span>
<span class="line"><span class="token keyword">from</span> utils<span class="token punctuation">.</span>logger <span class="token keyword">import</span> setup_logger</span>
<span class="line"></span>
<span class="line">logger <span class="token operator">=</span> setup_logger<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">OCRCacheManager</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> max_size<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        base_dir <span class="token operator">=</span> get_base_dir<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        cache_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">&quot;ocr_cache&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>cache_path<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>cache <span class="token operator">=</span> dc<span class="token punctuation">.</span>Cache<span class="token punctuation">(</span></span>
<span class="line">            directory<span class="token operator">=</span>cache_path<span class="token punctuation">,</span></span>
<span class="line">            size_limit<span class="token operator">=</span>max_size <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span></span>
<span class="line">            timeout<span class="token operator">=</span><span class="token number">1.0</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_get_image_hash</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>img<span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_get_cache_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> stage<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">        img_hash <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_image_hash<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>stage<span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span>img_hash<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> stage<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">        key <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_cache_key<span class="token punctuation">(</span>img<span class="token punctuation">,</span> stage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            result <span class="token operator">=</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> result <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> result</span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">            logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Cache get error: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> stage<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> ocr_result<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        key <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_cache_key<span class="token punctuation">(</span>img<span class="token punctuation">,</span> stage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> ocr_result<span class="token punctuation">,</span> expire<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">            logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Cache set error: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">clear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">            logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Cache clear error: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">            logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Cache close error: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="❸-giai-thich" tabindex="-1"><a class="header-anchor" href="#❸-giai-thich"><span>❸ Giải thích</span></a></h4><ul><li><p>✦ Triển khai diskcache bản chất cách dùng gần như không đổi.</p></li><li><p>✦ Khác biệt lớn nhất chúng ta thấy được nằm ở:</p><ul><li><p>✧ DiskCache tự quản lý eviction policy (xóa bớt entries cũ khi vượt quá size_limit hoặc cull_limit).</p></li><li><p>✧ DiskCache lo giùm chuyện dọn rác, lock, share dữ liệu giữa processes.</p></li></ul></li></ul>`,78)]))}const o=s(c,[["render",t],["__file","ocr-cache-tesseract.html.vue"]]),u=JSON.parse('{"path":"/blog-posts/ai/ocr-cache-tesseract.html","title":"Cải thiện hiệu năng Tesseract-OCR bằng Cache","lang":"vi-VN","frontmatter":{"title":"Cải thiện hiệu năng Tesseract-OCR bằng Cache","summary":"Nếu bạn nhận thấy Tesseract tốn nhiều thời gian để nhận diện cùng một dữ liệu lặp đi lặp lại, thì cache chính là giải pháp. Bài viết này giới thiệu cách áp dụng cache để lưu kết quả OCR.","date":"2025-08-17","image":"/vuepress-blog/images/posts/ocr-tesseract.png","category":"AI / Machine Learning","tags":["ai","machine learning","ocr","tesseract","cache-tesseract"]},"headers":[{"level":2,"title":"📌 1. Giới thiệu","slug":"📌-1-gioi-thieu","link":"#📌-1-gioi-thieu","children":[{"level":3,"title":"1️⃣ Giải pháp cache (bộ nhớ đệm)","slug":"_1️⃣-giai-phap-cache-bo-nho-đem","link":"#_1️⃣-giai-phap-cache-bo-nho-đem","children":[]},{"level":3,"title":"2️⃣ Cơ chế cache","slug":"_2️⃣-co-che-cache","link":"#_2️⃣-co-che-cache","children":[]},{"level":3,"title":"3️⃣ Các loại cache","slug":"_3️⃣-cac-loai-cache","link":"#_3️⃣-cac-loai-cache","children":[]},{"level":3,"title":"4️⃣ Giới hạn số lượng cache","slug":"_4️⃣-gioi-han-so-luong-cache","link":"#_4️⃣-gioi-han-so-luong-cache","children":[]}]},{"level":2,"title":"📌 2. Best Practices khi dùng cache cho OCR","slug":"📌-2-best-practices-khi-dung-cache-cho-ocr","link":"#📌-2-best-practices-khi-dung-cache-cho-ocr","children":[{"level":3,"title":"1️⃣ Hash trên ảnh gốc hay sau tiền xử lý?","slug":"_1️⃣-hash-tren-anh-goc-hay-sau-tien-xu-ly","link":"#_1️⃣-hash-tren-anh-goc-hay-sau-tien-xu-ly","children":[]},{"level":3,"title":"2️⃣ Chọn RAM cache hay Disk cache?","slug":"_2️⃣-chon-ram-cache-hay-disk-cache","link":"#_2️⃣-chon-ram-cache-hay-disk-cache","children":[]},{"level":3,"title":"3️⃣ Nên giới hạn số lượng cache theo cách nào?","slug":"_3️⃣-nen-gioi-han-so-luong-cache-theo-cach-nao","link":"#_3️⃣-nen-gioi-han-so-luong-cache-theo-cach-nao","children":[]},{"level":3,"title":"4️⃣ Triển khai cache hiểu quả trong project?","slug":"_4️⃣-trien-khai-cache-hieu-qua-trong-project","link":"#_4️⃣-trien-khai-cache-hieu-qua-trong-project","children":[]}]},{"level":2,"title":"📌 3. Triển khai cache trong OCR với Tesseract","slug":"📌-3-trien-khai-cache-trong-ocr-voi-tesseract","link":"#📌-3-trien-khai-cache-trong-ocr-voi-tesseract","children":[{"level":3,"title":"1️⃣ Tạo class quản lý cache","slug":"_1️⃣-tao-class-quan-ly-cache","link":"#_1️⃣-tao-class-quan-ly-cache","children":[]},{"level":3,"title":"2️⃣ Sinh key duy nhất cho ảnh","slug":"_2️⃣-sinh-key-duy-nhat-cho-anh","link":"#_2️⃣-sinh-key-duy-nhat-cho-anh","children":[]},{"level":3,"title":"3️⃣ Tạo các hàm get và set kết quả OCR theo key","slug":"_3️⃣-tao-cac-ham-get-va-set-ket-qua-ocr-theo-key","link":"#_3️⃣-tao-cac-ham-get-va-set-ket-qua-ocr-theo-key","children":[]},{"level":3,"title":"4️⃣ Dọn cache","slug":"_4️⃣-don-cache","link":"#_4️⃣-don-cache","children":[]},{"level":3,"title":"5️⃣ Sử dụng trong OCR","slug":"_5️⃣-su-dung-trong-ocr","link":"#_5️⃣-su-dung-trong-ocr","children":[]},{"level":3,"title":"🔥 Ví dụ kết hợp Hybrid (RAM + Disk) với thư viện diskcache","slug":"🔥-vi-du-ket-hop-hybrid-ram-disk-voi-thu-vien-diskcache","link":"#🔥-vi-du-ket-hop-hybrid-ram-disk-voi-thu-vien-diskcache","children":[]}]}],"git":{},"filePathRelative":"blog-posts/ai/ocr-cache-tesseract.md"}');export{o as comp,u as data};
