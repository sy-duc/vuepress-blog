import{_ as s,c as a,d as e,o as p}from"./app-CQf6q5OW.js";const l={};function t(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="pl-sql-nang-cao" tabindex="-1"><a class="header-anchor" href="#pl-sql-nang-cao"><span>PL/SQL nâng cao</span></a></h1><p><a href="#1">1. Transactions</a></p><p><a href="#2">2. Dynamic SQL</a></p><p><a href="#3">3. Collection và Record</a></p><p><a href="#4">4. Bulk Processing</a></p><p><a name="1"></a></p><h2 id="📌-1-transactions-trong-pl-sql" tabindex="-1"><a class="header-anchor" href="#📌-1-transactions-trong-pl-sql"><span>📌 1. Transactions trong PL/SQL</span></a></h2><p>Transaction là một tập hợp các câu lệnh SQL được thực thi như một đơn vị công việc.</p><p>Về tính chất của Transaction thì chắc sẽ không cần đề cập lại.</p><p>Trong PL/SQL, một transaction bắt đầu tự động khi thực hiện bất kỳ câu lệnh DML (INSERT, UPDATE, DELETE).</p><h3 id="🔹-cac-lenh-đieu-khien-transaction-trong-pl-sql" tabindex="-1"><a class="header-anchor" href="#🔹-cac-lenh-đieu-khien-transaction-trong-pl-sql"><span>🔹 Các lệnh điều khiển Transaction trong PL/SQL</span></a></h3><table><thead><tr><th style="text-align:center;">Lệnh</th><th style="text-align:center;">Chức năng</th></tr></thead><tbody><tr><td style="text-align:center;">COMMIT</td><td style="text-align:center;">Xác nhận transaction, lưu thay đổi vào DB</td></tr><tr><td style="text-align:center;">ROLLBACK</td><td style="text-align:center;">Hủy bỏ transaction, khôi phục trạng thái trước đó</td></tr><tr><td style="text-align:center;">SAVEPOINT</td><td style="text-align:center;">Đánh dấu một điểm để rollback một phần transaction</td></tr></tbody></table><h3 id="🔹-commit-–-luu-thay-đoi-vinh-vien" tabindex="-1"><a class="header-anchor" href="#🔹-commit-–-luu-thay-đoi-vinh-vien"><span>🔹 COMMIT – Lưu thay đổi vĩnh viễn</span></a></h3><p>Sau khi COMMIT, dữ liệu không thể rollback lại.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">COMMIT</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-rollback-–-huy-bo-transaction" tabindex="-1"><a class="header-anchor" href="#🔹-rollback-–-huy-bo-transaction"><span>🔹 ROLLBACK – Hủy bỏ Transaction</span></a></h3><p>Nếu có lỗi, ROLLBACK sẽ hoàn tác mọi thay đổi về trạng thái ban đầu.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.2</span> <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- Có lỗi xảy ra</span></span>
<span class="line">    <span class="token keyword">IF</span> some_error <span class="token keyword">THEN</span></span>
<span class="line">        <span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span> <span class="token comment">-- Hủy toàn bộ thay đổi</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-savepoint-–-rollback-tung-phan" tabindex="-1"><a class="header-anchor" href="#🔹-savepoint-–-rollback-tung-phan"><span>🔹 SAVEPOINT – Rollback từng phần</span></a></h3><p>SAVEPOINT giúp rollback một phần transaction thay vì rollback toàn bộ.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token comment">-- Cập nhật lần 1</span></span>
<span class="line">    <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">SAVEPOINT</span> sp1<span class="token punctuation">;</span> <span class="token comment">-- Lưu lại trạng thái</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- Cập nhật lần 2</span></span>
<span class="line">    <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.2</span> <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">SAVEPOINT</span> sp2<span class="token punctuation">;</span> <span class="token comment">-- Lưu lại trạng thái</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- Nếu có lỗi, rollback về điểm sp1 (giữ lại cập nhật lần 1)</span></span>
<span class="line">    <span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> sp1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- Commit phần còn lại</span></span>
<span class="line">    <span class="token keyword">COMMIT</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sau khi rollback về sp1:</p><p>✅ Thay đổi của department_id = 10 vẫn giữ.</p><p>❌ Thay đổi của department_id = 20 bị hủy.</p><h3 id="🔹-autocommit-–-transaction-tu-đong" tabindex="-1"><a class="header-anchor" href="#🔹-autocommit-–-transaction-tu-đong"><span>🔹 AUTOCOMMIT – Transaction tự động</span></a></h3><ul><li><p>Kiểm tra trạng thái AUTOCOMMIT:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SHOW</span> AUTOCOMMIT<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Tắt Autocommit để kiểm soát transaction thủ công:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SET</span> AUTOCOMMIT <span class="token keyword">OFF</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><a name="2"></a></p><h2 id="📌-2-dynamic-sql" tabindex="-1"><a class="header-anchor" href="#📌-2-dynamic-sql"><span>📌 2. Dynamic SQL</span></a></h2><p>Dynamic SQL (SQL động) là kỹ thuật cho phép xây dựng và thực thi câu lệnh SQL một cách linh hoạt tại thời điểm chạy (runtime) thay vì viết cố định trong mã nguồn.</p><p>Cần Dynamic SQL khi:</p><ul><li>Câu lệnh SQL thay đổi linh hoạt theo dữ liệu đầu vào.</li><li>Tên bảng, cột, điều kiện WHERE không thể xác định trước.</li><li>Cần thực thi DDL (CREATE, DROP, ALTER) trong PL/SQL.</li><li>Cần gọi stored procedure với tham số động.</li></ul><h3 id="🔹-cach-thuc-hien-dynamic-sql" tabindex="-1"><a class="header-anchor" href="#🔹-cach-thuc-hien-dynamic-sql"><span>🔹 Cách thực hiện Dynamic SQL</span></a></h3><p>PL/SQL cung cấp hai cách chính để thực thi Dynamic SQL:</p><table><thead><tr><th style="text-align:center;">Cách</th><th style="text-align:center;">Khi nào dùng?</th></tr></thead><tbody><tr><td style="text-align:center;">EXECUTE IMMEDIATE</td><td style="text-align:center;">Khi câu lệnh chỉ chạy một lần</td></tr><tr><td style="text-align:center;">OPEN FOR ... USING</td><td style="text-align:center;">Khi cần fetch nhiều dòng dữ liệu (dùng với CURSOR)</td></tr></tbody></table><h3 id="🔹-execute-immediate-–-cach-đon-gian-nhat" tabindex="-1"><a class="header-anchor" href="#🔹-execute-immediate-–-cach-đon-gian-nhat"><span>🔹 EXECUTE IMMEDIATE – Cách đơn giản nhất</span></a></h3><p>Dùng để thực thi các câu lệnh SELECT, INSERT, UPDATE, DELETE, DDL.</p><p>🔍 Ví dụ SELECT động:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    v_table_name VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">&#39;employees&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    v_count NUMBER<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">EXECUTE</span> IMMEDIATE <span class="token string">&#39;SELECT COUNT(*) FROM &#39;</span> <span class="token operator">||</span> v_table_name <span class="token keyword">INTO</span> v_count<span class="token punctuation">;</span></span>
<span class="line">    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">&#39;Total rows: &#39;</span> <span class="token operator">||</span> v_count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔍 Ví dụ dùng USING để truyền tham số:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    v_sql VARCHAR2<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    v_salary NUMBER :<span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    v_sql :<span class="token operator">=</span> <span class="token string">&#39;UPDATE employees SET salary = salary + 100 WHERE salary &gt; :min_salary&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">EXECUTE</span> IMMEDIATE v_sql <span class="token keyword">USING</span> v_salary<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">COMMIT</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-open-for-using-–-dynamic-cursor" tabindex="-1"><a class="header-anchor" href="#🔹-open-for-using-–-dynamic-cursor"><span>🔹 OPEN FOR ... USING – Dynamic Cursor</span></a></h3><p>🔍 Ví dụ Fetch dữ liệu động với CURSOR:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    v_cursor SYS_REFCURSOR<span class="token punctuation">;</span></span>
<span class="line">    v_table_name VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">&#39;employees&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    v_emp_name employees<span class="token punctuation">.</span>last_name<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token comment">-- Mở cursor với bảng động</span></span>
<span class="line">    <span class="token keyword">OPEN</span> v_cursor <span class="token keyword">FOR</span> <span class="token string">&#39;SELECT last_name FROM &#39;</span> <span class="token operator">||</span> v_table_name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">LOOP</span></span>
<span class="line">        <span class="token keyword">FETCH</span> v_cursor <span class="token keyword">INTO</span> v_emp_name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">EXIT</span> <span class="token keyword">WHEN</span> v_cursor<span class="token operator">%</span>NOTFOUND<span class="token punctuation">;</span></span>
<span class="line">        DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">&#39;Employee: &#39;</span> <span class="token operator">||</span> v_emp_name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">CLOSE</span> v_cursor<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="3"></a></p><h2 id="📌-3-collection-va-record-trong-pl-sql" tabindex="-1"><a class="header-anchor" href="#📌-3-collection-va-record-trong-pl-sql"><span>📌 3. Collection và Record trong PL/SQL</span></a></h2><p>Collection trong PL/SQL là một cấu trúc dữ liệu chứa nhiều phần tử cùng kiểu dữ liệu, tương tự như mảng trong các ngôn ngữ lập trình khác.</p><p>PL/SQL hỗ trợ 3 loại Collection chính:</p><table><thead><tr><th style="text-align:center;">Loại Collection</th><th style="text-align:center;">Khi nào dùng?</th><th style="text-align:center;">Đặc điểm</th></tr></thead><tbody><tr><td style="text-align:center;">VARRAY</td><td style="text-align:center;">Khi số phần tử cố định</td><td style="text-align:center;">Chỉ định số lượng tối đa; Lưu trong một cột của bảng</td></tr><tr><td style="text-align:center;">Nested Table</td><td style="text-align:center;">Khi cần danh sách động</td><td style="text-align:center;">Không giới hạn phần tử; Có thể lưu vào bảng dưới dạng cột</td></tr><tr><td style="text-align:center;">Associative Array (Index-by Table)</td><td style="text-align:center;">Khi cần truy xuất theo key</td><td style="text-align:center;">Key có thể là số hoặc chuỗi; Không lưu trong DB</td></tr></tbody></table><h3 id="🔹-varray-–-mang-co-đinh-so-phan-tu" tabindex="-1"><a class="header-anchor" href="#🔹-varray-–-mang-co-đinh-so-phan-tu"><span>🔹 VARRAY – Mảng cố định số phần tử</span></a></h3><p>Khai báo và sử dụng:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_varray <span class="token operator">IS</span> VARRAY<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">OF</span> VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    v_departments t_varray :<span class="token operator">=</span> t_varray<span class="token punctuation">(</span><span class="token string">&#39;HR&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Finance&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">&#39;First department: &#39;</span> <span class="token operator">||</span> v_departments<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-nested-table-–-mang-đong" tabindex="-1"><a class="header-anchor" href="#🔹-nested-table-–-mang-đong"><span>🔹 Nested Table – Mảng động</span></a></h3><p>Khai báo và sử dụng:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_table <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    v_employees t_table :<span class="token operator">=</span> t_table<span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    v_employees<span class="token punctuation">.</span>EXTEND<span class="token punctuation">;</span> <span class="token comment">-- Mở rộng số phần tử</span></span>
<span class="line">    v_employees<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">&#39;David&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">FOR</span> i <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>v_employees<span class="token punctuation">.</span>COUNT <span class="token keyword">LOOP</span></span>
<span class="line">        DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">&#39;Employee: &#39;</span> <span class="token operator">||</span> v_employees<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-associative-array-–-truy-xuat-theo-key" tabindex="-1"><a class="header-anchor" href="#🔹-associative-array-–-truy-xuat-theo-key"><span>🔹 Associative Array – Truy xuất theo Key</span></a></h3><p>Khai báo và sử dụng:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_assoc <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    v_employees t_assoc<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    v_employees<span class="token punctuation">(</span><span class="token string">&#39;E001&#39;</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    v_employees<span class="token punctuation">(</span><span class="token string">&#39;E002&#39;</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">&#39;Employee E001: &#39;</span> <span class="token operator">||</span> v_employees<span class="token punctuation">(</span><span class="token string">&#39;E001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-record" tabindex="-1"><a class="header-anchor" href="#🔹-record"><span>🔹 RECORD</span></a></h3><p>Record giúp nhóm nhiều trường dữ liệu vào một biến duy nhất.</p><p>Khai báo và sử dụng:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_employee <span class="token operator">IS</span> RECORD <span class="token punctuation">(</span></span>
<span class="line">        emp_id NUMBER<span class="token punctuation">,</span></span>
<span class="line">        emp_name VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        salary NUMBER</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    v_emp t_employee<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    v_emp<span class="token punctuation">.</span>emp_id :<span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span></span>
<span class="line">    v_emp<span class="token punctuation">.</span>emp_name :<span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    v_emp<span class="token punctuation">.</span>salary :<span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">&#39;Employee: &#39;</span> <span class="token operator">||</span> v_emp<span class="token punctuation">.</span>emp_name <span class="token operator">||</span> <span class="token string">&#39; - Salary: &#39;</span> <span class="token operator">||</span> v_emp<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-record-voi-cursor-–-fetch-nhieu-dong" tabindex="-1"><a class="header-anchor" href="#🔹-record-voi-cursor-–-fetch-nhieu-dong"><span>🔹 RECORD với CURSOR – Fetch nhiều dòng</span></a></h3><p>Có thể dùng RECORD để chứa từng dòng dữ liệu:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_employee <span class="token operator">IS</span> RECORD <span class="token punctuation">(</span></span>
<span class="line">        emp_id employees<span class="token punctuation">.</span>employee_id<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">,</span></span>
<span class="line">        emp_name employees<span class="token punctuation">.</span>last_name<span class="token operator">%</span><span class="token keyword">TYPE</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    v_emp t_employee<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">CURSOR</span> c_emp <span class="token operator">IS</span> <span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> ROWNUM <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">OPEN</span> c_emp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">LOOP</span></span>
<span class="line">        <span class="token keyword">FETCH</span> c_emp <span class="token keyword">INTO</span> v_emp<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">EXIT</span> <span class="token keyword">WHEN</span> c_emp<span class="token operator">%</span>NOTFOUND<span class="token punctuation">;</span></span>
<span class="line">        DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>v_emp<span class="token punctuation">.</span>emp_id <span class="token operator">||</span> <span class="token string">&#39; - &#39;</span> <span class="token operator">||</span> v_emp<span class="token punctuation">.</span>emp_name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">CLOSE</span> c_emp<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="4"></a></p><h2 id="📌-4-bulk-processing-trong-pl-sql" tabindex="-1"><a class="header-anchor" href="#📌-4-bulk-processing-trong-pl-sql"><span>📌 4. Bulk Processing trong PL/SQL</span></a></h2><p>Bulk Processing giúp xử lý nhiều dòng dữ liệu cùng lúc, giảm số lần tương tác với SQL Engine, giúp tăng hiệu suất đáng kể so với cách xử lý từng dòng riêng lẻ.</p><p>PL/SQL cung cấp 2 cơ chế chính:</p><ul><li>BULK COLLECT → Lấy nhiều dòng dữ liệu vào Collection cùng lúc</li><li>FORALL → Chèn, cập nhật, xóa nhiều dòng dữ liệu cùng lúc</li></ul><h3 id="🔹-bulk-collect-–-lay-nhieu-dong-du-lieu" tabindex="-1"><a class="header-anchor" href="#🔹-bulk-collect-–-lay-nhieu-dong-du-lieu"><span>🔹 BULK COLLECT – Lấy nhiều dòng dữ liệu</span></a></h3><p>💡 Thay vì dùng LOOP để FETCH từng dòng:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_emp_list <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> employees<span class="token operator">%</span>ROWTYPE<span class="token punctuation">;</span></span>
<span class="line">    v_emp_list t_emp_list<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">CURSOR</span> c_emp <span class="token operator">IS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">OPEN</span> c_emp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">LOOP</span></span>
<span class="line">        <span class="token keyword">FETCH</span> c_emp <span class="token keyword">INTO</span> v_emp_list<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">EXIT</span> <span class="token keyword">WHEN</span> c_emp<span class="token operator">%</span>NOTFOUND<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">CLOSE</span> c_emp<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>💡 Có thể dùng BULK COLLECT để lấy toàn bộ dữ liệu một lần:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_emp_list <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> employees<span class="token operator">%</span>ROWTYPE<span class="token punctuation">;</span></span>
<span class="line">    v_emp_list t_emp_list<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> v_emp_list <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ Lợi ích của BULK COLLECT:</p><ul><li>Giảm số lần gọi FETCH</li><li>Nhanh hơn gấp nhiều lần khi xử lý số lượng lớn dữ liệu</li><li>Có thể kết hợp với LIMIT để tránh quá tải bộ nhớ (xem ví dụ bên dưới)</li></ul><h3 id="🔹-forall-–-chen-cap-nhat-xoa-hang-loat" tabindex="-1"><a class="header-anchor" href="#🔹-forall-–-chen-cap-nhat-xoa-hang-loat"><span>🔹 FORALL – Chèn, cập nhật, xóa hàng loạt</span></a></h3><p>💡 Thay vì dùng vòng FOR để INSERT/UPDATE/DELETE từng dòng:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_emp_id_list <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> employees<span class="token punctuation">.</span>employee_id<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line">    v_emp_id_list t_emp_id_list :<span class="token operator">=</span> t_emp_id_list<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">FOR</span> i <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>v_emp_id_list<span class="token punctuation">.</span>COUNT <span class="token keyword">LOOP</span></span>
<span class="line">        <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> v_emp_id_list<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>💡 Có thể dùng FORALL để thực hiện nhiều dòng một lần:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_emp_id_list <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> employees<span class="token punctuation">.</span>employee_id<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line">    v_emp_id_list t_emp_id_list :<span class="token operator">=</span> t_emp_id_list<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    FORALL i <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>v_emp_id_list<span class="token punctuation">.</span>COUNT</span>
<span class="line">        <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> v_emp_id_list<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-ket-hop-bulk-collect-forall" tabindex="-1"><a class="header-anchor" href="#🔹-ket-hop-bulk-collect-forall"><span>🔹 Kết hợp BULK COLLECT + FORALL</span></a></h3><p>💡 Tích hợp BULK COLLECT để lấy dữ liệu và FORALL để xử lý hàng loạt:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_emp_id_list <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> employees<span class="token punctuation">.</span>employee_id<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line">    v_emp_id_list t_emp_id_list<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token comment">-- Lấy danh sách employee_id của phòng ban 10</span></span>
<span class="line">    <span class="token keyword">SELECT</span> employee_id <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> v_emp_id_list <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- Cập nhật lương hàng loạt</span></span>
<span class="line">    FORALL i <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>v_emp_id_list<span class="token punctuation">.</span>COUNT</span>
<span class="line">        <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> v_emp_id_list<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-dung-bulk-collect-voi-limit" tabindex="-1"><a class="header-anchor" href="#🔹-dung-bulk-collect-voi-limit"><span>🔹 Dùng BULK COLLECT với LIMIT</span></a></h3><p>Nếu dữ liệu quá lớn, có thể dùng LIMIT để chia nhỏ các lần lấy dữ liệu.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">TYPE</span> t_emp_list <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> employees<span class="token operator">%</span>ROWTYPE<span class="token punctuation">;</span></span>
<span class="line">    v_emp_list t_emp_list<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">CURSOR</span> c_emp <span class="token operator">IS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">OPEN</span> c_emp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">LOOP</span></span>
<span class="line">        <span class="token keyword">FETCH</span> c_emp <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> v_emp_list <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">-- Lấy 100 dòng mỗi lần</span></span>
<span class="line">        <span class="token keyword">EXIT</span> <span class="token keyword">WHEN</span> v_emp_list<span class="token punctuation">.</span>COUNT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        FORALL i <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>v_emp_list<span class="token punctuation">.</span>COUNT</span>
<span class="line">            <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> v_emp_list<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>employee_id<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">CLOSE</span> c_emp<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,87)]))}const o=s(l,[["render",t],["__file","oracle-plsql-advanced.html.vue"]]),r=JSON.parse('{"path":"/blog-posts/back-end/oracle-plsql-advanced.html","title":"PL/SQL nâng cao","lang":"en-US","frontmatter":{"title":"PL/SQL nâng cao","summary":"Tiếp cận và khai thác sức mạnh thực sự của PL/SQL trong các hệ thống cơ sở dữ liệu phức tạp và hiệu năng cao.","date":"2025-06-14","image":"/vuepress-blog/images/posts/plsql.png","category":"BACK-END"},"headers":[{"level":2,"title":"📌 1. Transactions trong PL/SQL","slug":"📌-1-transactions-trong-pl-sql","link":"#📌-1-transactions-trong-pl-sql","children":[{"level":3,"title":"🔹 Các lệnh điều khiển Transaction trong PL/SQL","slug":"🔹-cac-lenh-đieu-khien-transaction-trong-pl-sql","link":"#🔹-cac-lenh-đieu-khien-transaction-trong-pl-sql","children":[]},{"level":3,"title":"🔹 COMMIT – Lưu thay đổi vĩnh viễn","slug":"🔹-commit-–-luu-thay-đoi-vinh-vien","link":"#🔹-commit-–-luu-thay-đoi-vinh-vien","children":[]},{"level":3,"title":"🔹 ROLLBACK – Hủy bỏ Transaction","slug":"🔹-rollback-–-huy-bo-transaction","link":"#🔹-rollback-–-huy-bo-transaction","children":[]},{"level":3,"title":"🔹 SAVEPOINT – Rollback từng phần","slug":"🔹-savepoint-–-rollback-tung-phan","link":"#🔹-savepoint-–-rollback-tung-phan","children":[]},{"level":3,"title":"🔹 AUTOCOMMIT – Transaction tự động","slug":"🔹-autocommit-–-transaction-tu-đong","link":"#🔹-autocommit-–-transaction-tu-đong","children":[]}]},{"level":2,"title":"📌 2. Dynamic SQL","slug":"📌-2-dynamic-sql","link":"#📌-2-dynamic-sql","children":[{"level":3,"title":"🔹 Cách thực hiện Dynamic SQL","slug":"🔹-cach-thuc-hien-dynamic-sql","link":"#🔹-cach-thuc-hien-dynamic-sql","children":[]},{"level":3,"title":"🔹 EXECUTE IMMEDIATE – Cách đơn giản nhất","slug":"🔹-execute-immediate-–-cach-đon-gian-nhat","link":"#🔹-execute-immediate-–-cach-đon-gian-nhat","children":[]},{"level":3,"title":"🔹 OPEN FOR ... USING – Dynamic Cursor","slug":"🔹-open-for-using-–-dynamic-cursor","link":"#🔹-open-for-using-–-dynamic-cursor","children":[]}]},{"level":2,"title":"📌 3. Collection và Record trong PL/SQL","slug":"📌-3-collection-va-record-trong-pl-sql","link":"#📌-3-collection-va-record-trong-pl-sql","children":[{"level":3,"title":"🔹 VARRAY – Mảng cố định số phần tử","slug":"🔹-varray-–-mang-co-đinh-so-phan-tu","link":"#🔹-varray-–-mang-co-đinh-so-phan-tu","children":[]},{"level":3,"title":"🔹 Nested Table – Mảng động","slug":"🔹-nested-table-–-mang-đong","link":"#🔹-nested-table-–-mang-đong","children":[]},{"level":3,"title":"🔹 Associative Array – Truy xuất theo Key","slug":"🔹-associative-array-–-truy-xuat-theo-key","link":"#🔹-associative-array-–-truy-xuat-theo-key","children":[]},{"level":3,"title":"🔹 RECORD","slug":"🔹-record","link":"#🔹-record","children":[]},{"level":3,"title":"🔹 RECORD với CURSOR – Fetch nhiều dòng","slug":"🔹-record-voi-cursor-–-fetch-nhieu-dong","link":"#🔹-record-voi-cursor-–-fetch-nhieu-dong","children":[]}]},{"level":2,"title":"📌 4. Bulk Processing trong PL/SQL","slug":"📌-4-bulk-processing-trong-pl-sql","link":"#📌-4-bulk-processing-trong-pl-sql","children":[{"level":3,"title":"🔹 BULK COLLECT – Lấy nhiều dòng dữ liệu","slug":"🔹-bulk-collect-–-lay-nhieu-dong-du-lieu","link":"#🔹-bulk-collect-–-lay-nhieu-dong-du-lieu","children":[]},{"level":3,"title":"🔹 FORALL – Chèn, cập nhật, xóa hàng loạt","slug":"🔹-forall-–-chen-cap-nhat-xoa-hang-loat","link":"#🔹-forall-–-chen-cap-nhat-xoa-hang-loat","children":[]},{"level":3,"title":"🔹 Kết hợp BULK COLLECT + FORALL","slug":"🔹-ket-hop-bulk-collect-forall","link":"#🔹-ket-hop-bulk-collect-forall","children":[]},{"level":3,"title":"🔹 Dùng BULK COLLECT với LIMIT","slug":"🔹-dung-bulk-collect-voi-limit","link":"#🔹-dung-bulk-collect-voi-limit","children":[]}]}],"git":{},"filePathRelative":"blog-posts/back-end/oracle-plsql-advanced.md"}');export{o as comp,r as data};
